---
title: "Data Cleaning Script"
format: html
---

```{r packages}
library(tidyverse)
```

Read in raw wot data

```{r}
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)
wot_raw <- read_csv(paste0(path,"/data/imported_data/wot_raw.csv"))
```

Fixes raw data be rectangular and tidy

```{r}
rectangular_wot <- wot_raw |> 
 pivot_wider(values_from = value,names_from = variable,values_fill = NA) |> 
  mutate_all(as.character) |> 
  mutate_all(~na_if(., "NULL"))

number_nas <- rectangular_wot |> 
  summarise(across(everything(), ~ sum(!is.na(.)))) |> 
  pivot_longer(cols = c(1:26)) |> 
  arrange(desc(value))
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)
write_csv(number_nas,paste0(path,"/data/cleaned_data/metadata/number_nas_wot.csv"))
```


fix hair with Daniel's regex and a few dark comma additions to the regex
then fix the commas

```{r}
rectangular_wot |>
  mutate(
    Hair = str_extract(Hair, pattern = "[sS]ilver|[bB]londe|[wW]hite|[bB]lack|[bB]rown|[gG]r[ae]y|[gG]olden|[rR]ed|[gG]inger|[yY]ellow|[fF]air|[sS]tar|[rR]aven|[aA]uburn|[sS]andy|[lL]eaf|[dD]ark$|^[dD]ark\\s\\(|\\s*,\\s*[dD]ark$|^[dD]ark\\s*,\\s*")
  ) |>
  mutate(Hair = str_replace_all(
    string = Hair,
    #removing ()s from the cells
    pattern = ",",
    replacement = ""
  )) |>
  mutate(Hair = str_trim(Hair)) -> wot_data #removing extra white space
 
```

fix the height by looking for digits then feet and inches then do math to convert feet and inches to 1 value

```{r}
wot_data <- wot_data |> 
  mutate(Height = str_extract(Height, "\\s*\\d+\\.?\\d*\\s*'\\s*\\d+\\.?\\d*")) |> 
  mutate(feet = str_extract(Height, "^\\s*\\d+\\.?\\d*\\s*'"),
         inches = str_extract(Height, "'\\s*\\d+\\.?\\d*$")) |> 
  mutate(feet = str_replace_all(feet,"'",""),
         inches = str_replace_all(inches,"'","")) |> 
  mutate(Height = (12 * as.numeric(feet) + as.numeric(inches)))

```

calculate years alive using Daniel's function but modified

After Breaking (AB)	1 - 1350 AB Years
Free Years (FY)	1 - 1135 FY years
New Era (NE)	1 - 1000 NE years

Here first is the block that defines the function

```{r}
calculate_age_wot <- function(birth_year, birth_age, death_year, death_age) { #function that caluclates the years alive of a character
  #Durations of the different ages for calulations 
  first_age <- 1350 #first age is AB
  second_age <- 1135 #second age is FY
  third_age <- 1000 #thrid age is NE
  if (is.na(birth_age) + is.na(birth_year) + is.na(death_age) + is.na(death_year) > 0){
    NA #Returns NA if any of the 4 values is missing
  } else if (birth_age == death_age) { #subtracts birth year from death year if ages are the same
    (death_year - birth_year)
  } else if (birth_age == "AB" && death_age == "FY") { #Calculates age for various different combinations of ages
    (first_age - birth_year) + death_year
  } else if (birth_age == "AB" && death_age == "NE") {
    (first_age - birth_year) + second_age + death_year
  } else if (birth_age == "FY" && death_age == "NE") {
    (second_age - birth_year) + death_year
  }
  else {
    NA
  }
}
```

This block determines what age people were born in and what age they died in extracted from the raw data

```{r}
wot_data <- wot_data |> 
  filter(name != "Unnamed characters in New Spring") |> 
  filter(`Date of death` != "Eventual" | is.na(`Date of death`)) |>
  mutate(birth_age = str_extract(`Date of birth`,"[A-Z]{1,2}"),
         death_age = str_extract(`Date of death`,"[A-Z]{1,2}"),
         birth_year = str_extract(`Date of birth`, "\\d+"),
         death_year = str_extract(`Date of death`, "\\d+"),
         birth_year = case_when(birth_age == "A" ~ as.character(-500),
                                T ~ birth_year),
         birth_age = case_when(birth_age == "A" ~ "AB",
                               birth_age == "D" ~ "NE",
                               birth_age == "B" ~ "NE",
                               T ~ birth_age),
         birth_year = case_when(birth_year == "2" ~ "978",
                                T ~ birth_year),
         birth_year = as.numeric(birth_year),
         death_year = as.numeric(death_year))
```

Loop to go through each character and determine years alive

```{r}
years_alive <- list()#creating empty list for values to land in

for (x in 1:nrow(wot_data)){#for loop to loop through the rows
  row <- wot_data[x, ]#assinging row to a viariable
  birth_year <- row$birth_year#fetching values from the cells and assigning them to varriables
  birth_age <- row$birth_age
  death_year <- row$death_year
  death_age <- row$death_age
  years_alive[x] <- calculate_age_wot(birth_year, birth_age, death_year, death_age)} #running values through function that caluclates years alive
```

```{r}
as.numeric(years_alive)|> #reading new list as numeric
tibble() -> years_alive #turning list into tibble
```

```{r}
wot_data|> #adding new column to rest of data
  add_column(years_alive)|>
  rename("years_alive" =`as.numeric(years_alive)`) -> wot_data #renaming new column
```

Final renaming and adding series column which will be useful when combined with lotr data

```{r}
wot_data <- wot_data |> 
  rename("hair" = Hair) |> 
  rename("height_in" = Height) |> 
  rename("gender" = Gender)

series <- rep('wot', times = 2446) #creating new column to show what series each row is from
series <- tibble(series) #making new column a tibble
wot_data|> #adding new column to rest of data
  add_column(series) -> wot_data
```

Writing clean wot data to csv before selecting for combining purposes

```{r}
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)
write_csv(wot_data,paste0(path,"/data/cleaned_data/wot_data_final.csv"))
```

selecting shared variables for combining with lotr data

```{r}
wot <- wot_data |> 
    select(name,height_in,gender,birth_year,birth_age,death_year,death_age,years_alive,hair,series)
```


Lord of the Rings Data Tidying

```{r}
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)
lotr_data_test <- read_csv(paste0(path,"/data/imported_data/lotr_raw.csv"))
```



```{r}
series <- rep('lotr', times = 933) #creating new column to show what series each row is from
series <- tibble(series) #making new column a tibble
lotr_data_test|> #adding new column to rest of data
  add_column(series) -> lotr_data_test
```

```{r}
lotr_data_test|>
  select(name, height, race, gender, birth, death, hair, series)|> #selecting relevant columns for visualizations
  mutate(across(.cols = 1:8,#repalcing empty cells with NA across entire tibble
                .fns = \(x) na_if(x, "")))|>
  mutate(across(.cols = 1:8,#replacing NaN with NA, NaN mean NA for this data
                .fns = \(x) na_if(x, "NaN")))-> lotr_data_test
```

Birth and Death Column Tidying

```{r}
lotr_data_test|>
  mutate(birth = str_replace_all(string = birth, 
                                 pattern = "First Age", #finds first age in birth column
                                 replacement = "FA"), #replaces it with FA
         birth = str_replace_all(string = birth,
                                 pattern = "Second Age", #finds second age in birth column
                                 replacement = "SA"),#replaces it with SA
         birth = str_replace_all(string = birth,
                                 pattern = "Third Age",#finds third age in birth column
                                 replacement = "TA"),#replaces it with TA
         birth = str_replace_all(string = birth,
                                 pattern = "Fourth Age",#finds fourth age in birth column
                                 replacement = "FO"),#replaces it with FO
         birth = str_replace_all(string = birth,
                                 pattern = "Years of the Trees",#finds years of the trees in birth column
                                 replacement = "TY"),#replaces it with TY
         death = str_replace_all(string = death,
                                 pattern = "First Age",#finds first age in death column
                                 replacement = "FA"),#replaces it with FA
         death = str_replace_all(string = death,
                                 pattern = "Second Age",#finds second age in death column
                                 replacement = "SA"),#replaces it with SA
         death = str_replace_all(string = death,
                                 pattern = "Third Age",#finds thrid age in death column
                                 replacement = "TA"),#replaces it with TA
         death = str_replace_all(string = death,
                                 pattern = "Fourth Age",#finds fourth age in death column
                                 replacement = "FO"),
         death = str_replace_all(string = death,
                                 pattern = "Years of the Trees",#finds years of the trees in death column
                                 replacement = "TY"))-> lotr_data_test#replaces it with TY 
```

```{r}
lotr_data_test |> #Code to extract dates of death and birth into two new columns
  mutate(birth_year = str_extract(birth, pattern = "((?<=(,\\s))|(?<=(,))|(?<=([A-Z]{2}\\s)))\\d+"), #extracts the string of numbers (that fall under a set of parameters) from the birth column into a new column 
         death_year = str_extract(death, pattern = "((?<=(,\\s))|(?<=(,))|(?<=([A-Z]{2}\\s)))\\d+")) -> lotr_data_test #extracts the string of numbers (that fall under a set of parameters) from the death column into a new column 
```

```{r}
lotr_data_test|>
  mutate(birth_year = parse_double(birth_year),
         death_year = parse_double(death_year))-> lotr_data_test#parsing new columns as numbers
```

```{r}
lotr_data_test|> #Code to extract ages from the birth and death columns into two new columns
  mutate(birth_age = str_extract(birth,
                                 pattern = "[FSTY](A|O|T)"))|>
  mutate(death_age = str_extract(death,
                                 pattern = "[FSTY](A|O|T)")) -> lotr_data_test
```

```{r}
calculate_age_lotr <- function(birth_year, birth_age, death_year, death_age) { #function that caluclates the years alive of a character
  first_age <- 590 #Durations of the different ages for calulations 
  second_age <- 3441
  third_age <- 3021
  years_of_the_trees <- 1495
  yt_year_length <- 9.582 #year of the trees has longer years 1 to 9.582 regular years
  if (is.na(birth_age) + is.na(birth_year) + is.na(death_age) + is.na(death_year) > 0){
    NA #Returns NA if any of the 4 values is missing
  } else if (birth_age == death_age) { #subtracts birth year from death year if ages are the same
    (death_year - birth_year)
  } else if (birth_age == "FA" && death_age == "SA") { #Calculates age for various different combinations of ages
    (first_age - birth_year) + death_year
  } else if (birth_age == "FA" && death_age == "TA") {
    (first_age - birth_year) + second_age + death_year
  } else if (birth_age == "FA" && death_age == "FO") {
    (first_age - birth_year) + second_age + third_age + death_year
  } else if (birth_age == "SA" && death_age == "TA") {
    (second_age - birth_year) + death_year
  } else if (birth_age == "SA" && death_age == "FO") {
    (second_age - birth_year) + third_age + death_year
  } else if (birth_age == "TA" && death_age == "FO") {
    (third_age - birth_year) + death_year
  } else if (birth_age == "YT" && death_age == "FA") {
    ((years_of_the_trees - birth_year) * yt_year_length) + death_year
  } else if (birth_age == "YT" && death_age == "SA") {
    ((years_of_the_trees - birth_year) * yt_year_length) + first_age + death_year
  } else if (birth_age == "YT" && death_age == "TA") {
    ((years_of_the_trees - birth_year) * yt_year_length) + first_age + second_age + death_year
  } else if (birth_age == "YT" && death_age == "FO") {
    ((years_of_the_trees - birth_year) * yt_year_length) + first_age + second_age + third_age + death_year
  }
  else {
    NA
  }
}
```

```{r}
years_alive <- list()#creating empty list for values to land in

for (x in 1:nrow(lotr_data_test)){#for loop to loop through the rows
  row <- lotr_data_test[x, ]#assinging row to a viariable
  birth_year <- row$birth_year#fetching values from the cells and assigning them to varriables
  birth_age <- row$birth_age
  death_year <- row$death_year
  death_age <- row$death_age
  years_alive[x] <- calculate_age_lotr(birth_year, birth_age, death_year, death_age)}#running values through function that caluclates years alive
```

```{r}
as.numeric(years_alive)|> #reading new list as numeric
tibble() -> years_alive #turning list into tibble
```

```{r}
lotr_data_test|> #adding new column to rest of data
  add_column(years_alive)|>
  rename("years_alive" =`as.numeric(years_alive)`) -> lotr_data_test #renaming new column
```

Hair Column Tidying

```{r}
lotr_data_test|> #code to clean up the names column for easier comparison later
  mutate(hair_simplified = str_extract(hair, #pulling out main different colors of hair
                                       pattern = "[sS]ilver|[bB]londe|[wW]hite|[bB]lack|[bB]rown|[gG]r[ae]y|[gG]olden|[rR]ed|[gG]inger|[yY]ellow|[fF]air|[sS]tar|[rR]aven|[aA]uburn|[sS]andy|[lL]eaf|[dD]ark$|^[dD]ark\\s\\("))|>
  mutate(hair_simplified = str_to_title(hair_simplified), #making all colors upper case
         hair_simplified = str_replace_all(string = hair_simplified, #removing ()s from the cells
                                           pattern = "\\(",
                                           replacement = ""),
         hair_simplified = str_trim(hair_simplified))-> lotr_data_test #removing extra white space
```

Height Column Tidying

```{r}
lotr_data_test|>
  mutate(height = str_replace_all(string = height, #turining the word nine to number 9
                                  pattern = "nine",
                                  replacement = "9"),
         height = str_replace_all(string = height, #replacing the word feet with '
                                  pattern = "feet",
                                  replacement = "'"),
         height = str_replace_all(string = height,#replacing the one comma with '
                                  pattern = ",",
                                  replacement = "'"),
         height = str_squish(height), #squishing down all spaces for easier extraction later
         height = str_replace_all(string = height, #removing remaining spaces for easier extraction
                                  pattern = " ",
                                  replacement = ""),
         height = str_replace_all(string = height, #changing one point which has just 30 (only instance of 30) with no signifier of unit, looked up and found it was 30 fathoms, changing to standard units
                                  pattern = "30", 
                                  replacement = "180'"),
         simplified_height = str_extract(string = height, #extracting all numbers using feet'inches"
                                         pattern = "(\\d{1,2}'\\d{1,2}\")|(\\d{1,2}'\\d{1,2})|(\\d{1,3}')"),
         simplified_height = str_replace_all(string = simplified_height, #removing all " to make all cells uniform
                                             pattern = "\"",
                                             replacement = ""),
         simplified_height_ft = str_extract(string = simplified_height, #making a new column that only holds the ft values
                                            pattern = "\\d{1,3}'"),
         simplified_height_ft = str_replace_all(string = simplified_height_ft, #removing excess '
                                                pattern = "'",
                                                replacement = ""),
         simplified_height_ft = parse_double(simplified_height_ft), #parsing new column as a number
         simplified_height_in = str_extract(string = simplified_height, #making a new column that only holds in values
                                            pattern = "('\\d{1,3})|'$"),
         simplified_height_in = str_replace_all(string = simplified_height_in,#making cells that only contain a ' = 0
                                                pattern = "^'$",
                                                replacement = "0"),
         simplified_height_in = str_replace_all(string = simplified_height_in, #removing excess '
                                                pattern = "'",
                                                replacement = ""),
         simplified_height_in = parse_double(simplified_height_in)) -> lotr_data_test #parsing new column as a number
```

```{r}
lotr_data_test|>
  mutate(simplified_height_ft = (simplified_height_ft * 12), #changing ft to inches
         height_in = simplified_height_ft + simplified_height_in) -> lotr_data_test #adding to find total height in inches
```

Gender Column Cleaning 

```{r}
lotr_data_test|> #weeding out weird examples of genders being spelled weird or random added letters
  mutate(gender = str_replace_all(string = gender,
                                  pattern = "Most likely male|Males|^male",
                                  replacement = "Male")) -> lotr_data_test
```


```{r}
lotr_data_test|> #selecting relevant columns for export
  select(name, height_in, gender, birth_year, birth_age, death_year, death_age, years_alive, hair_simplified, series)|> 
  rename(hair = hair_simplified) -> lotr_data_final #shortening hair column name
```

writing to final lotr data which is clean

```{r}
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)
write_csv(lotr_data_final,paste0(path,"/data/cleaned_data/lotr_data_final.csv"))
```

combining data

```{r}
final_data <- wot |> 
  rbind(lotr_data_final)
```

writing to output data which will get posted on kaggle

```{r}
parent_dir <- file.path(getwd(),"..")
path <- normalizePath(parent_dir)

write_csv(final_data, paste0(path,"/output/final_data.csv"))
```